<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://beilong-tang.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://beilong-tang.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-04-13T09:45:31+00:00</updated><id>https://beilong-tang.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">SLT Conference</title><link href="https://beilong-tang.github.io/blog/2024/slt/" rel="alternate" type="text/html" title="SLT Conference"/><published>2024-12-02T13:00:00+00:00</published><updated>2024-12-02T13:00:00+00:00</updated><id>https://beilong-tang.github.io/blog/2024/slt</id><content type="html" xml:base="https://beilong-tang.github.io/blog/2024/slt/"><![CDATA[<p>I am very honored to attend <a href="https://2024.ieeeslt.org/">SLT 2024</a> hosted in Macao.</p> <p>There are many fasinating works on discrete tokens. Keynote spekaer Prof. <a href="https://www.surrey.ac.uk/people/wenwu-wang">Wenwu Wang</a> shared his research on <a href="https://arxiv.org/abs/2405.00233">SemanticCodec</a>. It has a high accuracy on the first layer, making it potentially more suitable to various downstream decoder-only tasks where the autoregressive-model outputs the first layer only.</p> <p>My current reaserch bottleneck is how to reconstruct audios using discrete tokens from Kmeans on WavLM. I talked to one faculty and he gave me two papers to review: one is <a href="https://arxiv.org/abs/2402.08093">BASE TTS: Lessons from building a billion-parameter text-to-speech model on 100K hours of data</a>, and the other is <a href="https://ieeexplore.ieee.org/abstract/document/10447751">Towards Universal Speech Discrete Tokens: A Case Study for ASR and TTS</a>. He stated that reconstructing audio with only Kmeans input is impossible because the discretization process losses too much speaker information. I should focus on using auxilary information to reconstruct speech in the next stage. I also attended the great talk on Personalzized Speech Enhancement by Prof. <a href="https://minjekim.com/">Minje Kim</a> from UIUC.</p> <p>I also met the famous Professor <a href="https://speech.ee.ntu.edu.tw/~hylee/index.php">Hung-yi Lee</a> from National Taiwan University, and I took a photo with him.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/slt_2024/photo_w_hung-yi_lee.jpg" sizes="95vw"/> <img src="/assets/img/slt_2024/photo_w_hung-yi_lee.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>(of course, the person on the left is me :) )</em></p> <p><br/> <br/> <br/> <br/></p> <p>This is the group photo of our lab members:</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/slt_2024/smiip_group_photo.jpg" sizes="95vw"/> <img src="/assets/img/slt_2024/smiip_group_photo.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><em>(From left to right: Mingjing Yi (Undergraduate), Beilong Tang (Undergraduate), Ming Li, Zexin Cai(Postdoc at JHU), Qishan Zhang(RA))</em></p>]]></content><author><name></name></author><category term="general"/><category term="notes"/><summary type="html"><![CDATA[I am very honored to attend SLT 2024 hosted in Macao. There are many fasinating works on discrete tokens. Keynote spekaer Prof. Wenwu Wang shared his research on SemanticCodec. It has a high accuracy on the first layer, making it potentially more suitable to various downstream decoder-only tasks where the autoregressive-model outputs the first layer only. My current reaserch bottleneck is how to reconstruct audios using discrete tokens from Kmeans on WavLM. I talked to one faculty and he gave me two papers to review: one is BASE TTS: Lessons from building a billion-parameter text-to-speech model on 100K hours of data, and the other is Towards Universal Speech Discrete Tokens: A Case Study for ASR and TTS. He stated that reconstructing audio with only Kmeans input is impossible because the discretization process losses too much speaker information. I should focus on using auxilary information to reconstruct speech in the next stage. I also attended the great talk on Personalzized Speech Enhancement by Prof. Minje Kim from UIUC. I also met the famous Professor Hung-yi Lee from National Taiwan University, and I took a photo with him. (of course, the person on the left is me :) ) This is the group photo of our lab members: (From left to right: Mingjing Yi (Undergraduate), Beilong Tang (Undergraduate), Ming Li, Zexin Cai(Postdoc at JHU), Qishan Zhang(RA))]]></summary></entry><entry><title type="html">Read source code</title><link href="https://beilong-tang.github.io/blog/2024/read_source_code/" rel="alternate" type="text/html" title="Read source code"/><published>2024-11-01T13:00:00+00:00</published><updated>2024-11-01T13:00:00+00:00</updated><id>https://beilong-tang.github.io/blog/2024/read_source_code</id><content type="html" xml:base="https://beilong-tang.github.io/blog/2024/read_source_code/"><![CDATA[<p>As I’ve done coding for three years, I cannot emphasize the importance of reading source codes. I think for programmers and researchers, the most important thing is to fully understand others’ codes on github. Luckily, for deep learning, the code is normally written in the same framework (pytorch) and is usually simple.</p> <p>However, there do exist some codes that are either not written in the framework or language that we are familiar with or usually quite complicated, involving a lot of abstractions. Here are some of my tips that can potentially make reading code simpler.</p> <ul> <li>Use IDE.</li> <li>Ask ChatGPT.</li> <li>Do Unit Test.</li> </ul> <p><strong>Use IDE</strong></p> <p>Using good IDEs can be pivotal in understanding codes. Usually people write code non-linearly. For instance, when writing codes in the main function, people usually write another helper function in another file before finishing the rest in the main function. A good IDE allows you to jump between definitions and usages easily, which makes reading non-linear codes much easier.</p> <p><strong>Ask ChatGPT</strong></p> <p>AI Tools like ChatGPT comes into handy when reading complicated functions or reading unfamiliar frameworks. When reading complicated functions, you can ask ChatGPT to explain the details to you. In addition, ChatGPT demonstrates its strong capacity in reading codes in another language or unfamiliar frameworks. You can ask ChatGPT to rewrite the code into the language and the framework that you are familiar with, and it will save you a lot of time.</p> <p><strong>However, it is your responsibility in ensuring that the codes are right</strong>. At the end of the day, ChatGPT is nothing but modeling the probability distribution of the next word given all the previous words. In other words, it is not intelligent enough to ensure the codes it provide are correct. You should double check it.</p> <p><strong>Do Unit Test</strong></p> <p>Sometimes, it might help reading the code if we know what the output of the function is. For this situation, we can do some unit testing i.e., testing single module or function. After we get the output, we might have an intuitive understanding of what the function is doing.</p>]]></content><author><name></name></author><category term="coding"/><category term="python"/><summary type="html"><![CDATA[As I’ve done coding for three years, I cannot emphasize the importance of reading source codes. I think for programmers and researchers, the most important thing is to fully understand others’ codes on github. Luckily, for deep learning, the code is normally written in the same framework (pytorch) and is usually simple. However, there do exist some codes that are either not written in the framework or language that we are familiar with or usually quite complicated, involving a lot of abstractions. Here are some of my tips that can potentially make reading code simpler. Use IDE. Ask ChatGPT. Do Unit Test. Use IDE Using good IDEs can be pivotal in understanding codes. Usually people write code non-linearly. For instance, when writing codes in the main function, people usually write another helper function in another file before finishing the rest in the main function. A good IDE allows you to jump between definitions and usages easily, which makes reading non-linear codes much easier. Ask ChatGPT AI Tools like ChatGPT comes into handy when reading complicated functions or reading unfamiliar frameworks. When reading complicated functions, you can ask ChatGPT to explain the details to you. In addition, ChatGPT demonstrates its strong capacity in reading codes in another language or unfamiliar frameworks. You can ask ChatGPT to rewrite the code into the language and the framework that you are familiar with, and it will save you a lot of time. However, it is your responsibility in ensuring that the codes are right. At the end of the day, ChatGPT is nothing but modeling the probability distribution of the next word given all the previous words. In other words, it is not intelligent enough to ensure the codes it provide are correct. You should double check it. Do Unit Test Sometimes, it might help reading the code if we know what the output of the function is. For this situation, we can do some unit testing i.e., testing single module or function. After we get the output, we might have an intuitive understanding of what the function is doing.]]></summary></entry><entry><title type="html">Welcome to my blog!</title><link href="https://beilong-tang.github.io/blog/2024/welcome/" rel="alternate" type="text/html" title="Welcome to my blog!"/><published>2024-09-29T02:17:00+00:00</published><updated>2024-09-29T02:17:00+00:00</updated><id>https://beilong-tang.github.io/blog/2024/welcome</id><content type="html" xml:base="https://beilong-tang.github.io/blog/2024/welcome/"><![CDATA[<p>I just started writing posts recently, and I will try to write some fun stuff here.</p> <p>I do have a post about technical details like pytorch, linux etc. at <a href="https://beilong-tang.github.io/technical_blog/">here</a> if you are interested in. (Note that they are being reformated right now to make the contents in order).</p>]]></content><author><name></name></author><category term="general"/><category term="comments"/><category term="general"/><summary type="html"><![CDATA[I just started writing posts recently, and I will try to write some fun stuff here. I do have a post about technical details like pytorch, linux etc. at here if you are interested in. (Note that they are being reformated right now to make the contents in order).]]></summary></entry><entry><title type="html">Play with former National Basketball Player - Kyranbek Makan</title><link href="https://beilong-tang.github.io/blog/2024/basketball/" rel="alternate" type="text/html" title="Play with former National Basketball Player - Kyranbek Makan"/><published>2024-09-14T16:00:00+00:00</published><updated>2024-09-14T16:00:00+00:00</updated><id>https://beilong-tang.github.io/blog/2024/basketball</id><content type="html" xml:base="https://beilong-tang.github.io/blog/2024/basketball/"><![CDATA[<p>Kyranbek Makan, a former Chinese National Basketball player, visited our Campus! It is a great honor to play with him!</p> <p>He is really a nice guy, and I’ve learnt a lot from him.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/kyranbek1.jpg" sizes="95vw"/> <img src="/assets/img/kyranbek1.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/kyranbek.jpg" sizes="95vw"/> <img src="/assets/img/kyranbek.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div>]]></content><author><name></name></author><category term="sports"/><category term="comments"/><category term="sports"/><summary type="html"><![CDATA[It is honored to play with former Chinese National Basketball Player - Kyranbek Makan]]></summary></entry></feed>